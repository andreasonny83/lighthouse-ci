#!/usr/bin/env node

/**
 *  Copyright (c) 2018 AndreaSonny <andreasonny83@gmail.com> (https://github.com/andreasonny83)
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

'use strict';
const fs = require('fs');
const path = require('path');
const meow = require('meow');
const ora = require('ora');
const chalk = require('chalk');

const {
  scoreReducer
} = require('../lib/helpers');
const {
  getScores,
  getChromeFlags
} = require('../lib/config');
const lighthouseReporter = require('../lib/lighthouse-reporter');
const analizeScore = require('../lib/score-analizer');

const spinner = ora({
  color: 'yellow',
});

const cli = meow(
  `
  Usage
    $ lighthouse-ci <target-url>

  Example
    $ lighthouse-ci https://example.com/
    $ lighthouse-ci -s https://example.com/
    $ lighthouse-ci https://example.com/ --score=75
    $ lighthouse-ci https://example.com/ --accessibility=90 --seo=80
    $ lighthouse-ci https://example.com/ --accessibility=90 --seo=80 --report=folder

  Options
    -s, --silent                  Run Lighthouse without printing report log.
    --report=<path>               Generate an HTML report inside a specified folder.
    --filename=<filename>         Specify the name of the generated HTML report file (requires --report).
    --score=<threshold>           Specify a score threshold for the CI to pass.
    --performance=<threshold>     Specify a minimal performance score for the CI to pass.
    --pwa=<threshold>             Specify a minimal pwa score for the CI to pass.
    --accessibility=<threshold>   Specify a minimal accessibility score for the CI to pass.
    --best-practice=<threshold>   [DEPRECATED] Use best-practices instead.
    --best-practices=<threshold>  Specify a minimal best-practice score for the CI to pass.
    --seo=<threshold>             Specify a minimal seo score for the CI to pass.

  In addition to listed "lighthouse-ci" configuration flags, it is also possible to pass any native "lighthouse" flag.
  To see the full list of available flags, please refer to the official Google Lighthouse documentation at https://github.com/GoogleChrome/lighthouse#cli-options
`, {
    flags: {
      report: {
        type: 'string',
      },
      filename: {
        type: 'string',
        alias: 'f',
        default: 'report.html',
      },
      silent: {
        type: 'boolean',
        alias: 's',
        default: false,
      },
      score: {
        type: 'string'
      },
      performance: {
        type: 'string'
      },
      pwa: {
        type: 'string'
      },
      accessibility: {
        type: 'string'
      },
      bestPractice: {
        type: 'string'
      },
      bestPractices: {
        type: 'string'
      },
      seo: {
        type: 'string'
      },
    },
  },
);

const {
  report,
  filename,
  silent,
  s,
  score,
  performance,
  pwa,
  accessibility,
  bestPractice,
  bestPractices,
  seo,
  ...lighthouseFlags
} = cli.flags;
const calculatedBestPractices = bestPractice || bestPractices;
const flags = {
  report,
  filename,
  silent,
  s,
  score,
  performance,
  pwa,
  accessibility,
  ...(calculatedBestPractices && {
    'best-practices': calculatedBestPractices
  }),
  seo,
};

function init(args, chromeFlags) {
  const testUrl = args[0];

  // Run Google Lighthouse
  return lighthouseReporter(testUrl, flags, chromeFlags, lighthouseFlags).then(
    async ({
      categoryReport,
      htmlReport
    }) => {
      const {
        silent
      } = flags;

      if (flags.report) {
        const outputPath = path.resolve(flags.report, flags.filename);

        await fs.writeFileSync(outputPath, htmlReport);
      }

      return {
        categoryReport,
        silent
      };
    },
  );
}

Promise.resolve()
  .then(() => {
    if (cli.input.length === 0) {
      return cli.showHelp();
    }

    spinner.text = `Running Lighthouse on ${cli.input} ...\n`;
    spinner.start();

    return init(cli.input, getChromeFlags());
  })
  .then(({
    categoryReport,
    silent
  }) => {
    spinner.stop();

    if (!silent) {
      for (const category in categoryReport) {
        if (!categoryReport[category]) {
          continue;
        }

        console.log(
          `${chalk.yellow(category)}: ${chalk.yellow(
            categoryReport[category],
          )}`,
        );
      }
    }

    return categoryReport;
  })
  .then(categoryReport => {
    let thresholds = scoreReducer(flags, getScores());

    thresholds =
      Object.keys(thresholds).length === 0 ? {
        score: 100
      } : thresholds;

    if (thresholds && Object.keys(thresholds).length !== 0) {
      const isScorePassing = analizeScore(categoryReport, thresholds);

      if (isScorePassing) {
        console.log(chalk.green('All checked scores are passing. 🎉\n'));
        return process.exit(0);
      }
    }

    console.log(chalk.red('Failed. ❌\n'));
    throw new Error('lighthouse-ci test failed.');
  })
  .catch(err => {
    spinner.stop();
    console.log(chalk.red(err));
    return process.exit(1);
  });
